module("modemod", package.seeall)

-------------------------------------------------Some Initialization----------------

math.randomseed(os.time())
math.random(); math.random(); math.random();

computer_input = {}
player_input = {}
Game.round_number = 1
notes_played = 0
Game.computer_turn = true
random_num = -1
delay_counter = 0


-------------------------------------------------Some Properties---------------

get_round = function() return Game.round_number end

get_notes_played = function() return notes_played end


--------------------------------------------------Some Functions----------------

delay_time_for_func = function(length, do_something)
	delay_counter = delay_counter + Game.delta_time
	if delay_counter >= length then
		do_something()
		delay_counter = 0
	end
end

switch_turns = function()
	if Game.computer_turn then
		Game.computer_turn = false
		Game.player_turn = true
	else
		Game.computer_turn = true
		Game.player_turn = false
	end
end

computer_selects_button = function()
	random_num = math.random(0,3) 
	check_round_completion(random_num)
end

check_round_completion = function(n)
	if notes_played ~= Game.round_number then ---if these value's aren't equal
		activate_button(n) -----------------more note's can be played
	end
	if notes_played == Game.round_number then ---otherwise
		delay_time_for_func(0, switch_turns)
	end
end

activate_button = function(n)
	Game:activate_button(n) ----------------light up button
								------------play sound
	computer_input[#computer_input+1] = n --add computer's entry to the table
	notes_played = notes_played + 1 --------increment notes played
end

check_player_input = function()
	Game:check_player_input() -----ask game for player input
	input = Game.player_input -----assign player input
	if input >= 0 then
		Game:activate_button(input) --------use player input
		player_input[#player_input+1] = input ----compare this table's information with the computer_input table
	end
	compare_inputs_of(computer_input, player_input)
end

compare_inputs_of = function(computer, player)
	if player[#player] == computer[#player] then
		if #player == #computer then ------------------player has completed this round, set necessary data back to default
			notes_played = 0 
			Game.round_number = Game.round_number + 1
			for i, v in ipairs(computer_input) do computer_input[i]=nil	end --clear input tables for next round
			for i, v in ipairs(player_input) do player_input[i]=nil end
						-------------------------------perhaps award player some points
			delay_time_for_func(0, switch_turns)
			Game:RoundComplete()
		end
	elseif player[#player] ~= computer[#player] then --player has selected wrong button, set necessary data back to default
		notes_played = 0 
		Game.round_number = 1
		for i, v in ipairs(computer_input) do computer_input[i]=nil	end --clear input tables for next round
		for i, v in ipairs(player_input) do player_input[i]=nil end
		delay_time_for_func(0, switch_turns)
		Game:GameOver()
	end
end
